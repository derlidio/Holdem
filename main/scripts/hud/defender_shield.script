go.property("initial_position", vmath.vector3())
go.property("initial_scale", vmath.vector3())
go.property("hidden", false)
go.property("balloon", false)
go.property("balloon_delta", 2)
go.property("active", false)
go.property("enabled", false)

local balloon_text = ""

function init(self)

	self.initial_position = go.get(".", "position")
	self.initial_scale = go.get(".", "scale")

	balloon_text = label.get_text("/hud/balloon#label")

	go.set("/hud/shield#shield", "tint.w", 0)
	msg.post("/hud/balloon", "disable")
	msg.post(".", "disable")

end

function update(self, dt)

	if self.active then
		if not self.balloon and not hint_playing then
			if self.balloon_delta > 0 then
				self.balloon_delta = self.balloon_delta - dt
				if self.balloon_delta < 0 then
					self.balloon = true
					self.balloon_delta = 0
					show_shield_hint("")
				end
			end
		end
	end
		
end

function on_message(self, message_id, message, sender)

	if message_id == hash("grow") then
		if self.active then
			local s = vmath.vector3()
			s.x = self.initial_scale.x + 0.25
			s.y = self.initial_scale.y + 0.25
			s.z = 1
			go.animate(".", "scale", go.PLAYBACK_ONCE_FORWARD, s, go.EASING_OUTBOUNCE, 1, 0, shrink_shield)
			if message.sound == true then
				snd_play("/sound_fx#sword_hit")
			end
		end
		return
	end

	if message_id == hash("next") then
		if level > 0 and self.active then
			go.animate("/hud/shield#shield", "tint.w", go.PLAYBACK_ONCE_FORWARD, 0, go.EASING_LINEAR, 2, 0, next_shield)
		else
			next_shield(self)
		end
		return
	end

	if message_id == hash("hide") then
		if not self.hidden then
			go.animate("/hud/shield#shield", "tint.w", go.PLAYBACK_ONCE_FORWARD, 0, go.EASING_LINEAR, 2, 0, disable_shield)
			particlefx.stop("/hud/shield#fog")
		end
		return
	end

	if message_id == hash("stop_particles") then
		if self.active then
			particlefx.stop("/hud/shield#fog")
		end
		return
	end

	if message_id == hash("fire_particles") then
		if self.active then
			particlefx.play("/hud/shield#fog")
		end
		return
	end

	if message_id == hash("reset") then
		particlefx.stop("/hud/shield#fog")
		go.set("/hud/shield#shield", "tint.w", 0)
		sprite.play_flipbook("/hud/shield#shield", hash("Shield_1"))
		self.active = false
		return
	end

	if message_id == hash("click") then
		if help_on then
			select_shield_help_message()
		end
	end
	
end

function shrink_shield(self, url, property)
	go.animate(".", "scale", go.PLAYBACK_ONCE_FORWARD, self.initial_scale, go.EASING_LINEAR, 1)
end
	
function next_shield(self, url, property)

	self.active = true
	
	if level > 0 then
		self.balloon = true -- This will prevent the balloon from appearing after a load game.
		particlefx.stop("/hud/shield#fog")
		sprite.play_flipbook("/hud/shield#shield", hash("Shield_" .. (level + 1)))
	end

	go.set(".", "position.x", -640)
	go.set(".", "position.y", -500)
	
	go.set(".", "scale", vmath.vector3(2,2,1))
	
	go.set("/hud/shield#shield", "tint.w", 1)
	
	go.animate(".", "position.x", go.PLAYBACK_ONCE_FORWARD, self.initial_position.x, go.EASING_OUTBOUNCE, 2)
	go.animate(".", "position.y", go.PLAYBACK_ONCE_FORWARD, self.initial_position.y, go.EASING_OUTBOUNCE, 2)
	
	go.animate(".", "scale", go.PLAYBACK_ONCE_FORWARD, self.initial_scale, go.EASING_OUTBOUNCE, 2, 0, woble_shield)
	
	snd_play("/sound_fx#next_shield")

	if not self.enabled then
		self.enabled = true
		msg.post(".", "enable")
	end
	
end

function woble_shield(self, url, property)

	go.set(".", "position", self.initial_position)

	go.animate(".", "position.y", go.PLAYBACK_LOOP_PINGPONG, self.initial_position.y + 8, go.EASING_INOUTSINE, 4)
	go.animate(".", "position.x", go.PLAYBACK_LOOP_PINGPONG, self.initial_position.x - 4, go.EASING_INOUTSINE, 8)

	particlefx.play("/hud/shield#fog")
	
end

function disable_shield(self, url, property)
	self.active = false
	self.enabled = false
	msg.post(".", "disable")
end

function show_shield_hint(message)

	if not opt_info and not help_on then return end

	hint_playing = true
	
	if message == "" then
		label.set_text("/hud/balloon#label", balloon_text)
	else
		label.set_text("/hud/balloon#label", message)
	end

	go.set("/hud/balloon#balloon", "tint.w", 0)
	go.set("/hud/balloon#label", "color.w", 0)

	msg.post("/hud/balloon", "enable")
	
	go.animate("/hud/balloon#balloon","tint.w", go.PLAYBACK_ONCE_FORWARD, 1, go.EASING_LINEAR, 0.5)
	go.animate("/hud/balloon#label","color.w",  go.PLAYBACK_ONCE_FORWARD, 1, go.EASING_LINEAR, 0.5, 0, hide_shield_hint)

end

function hide_shield_hint(self, url, property)

	go.animate("/hud/balloon#balloon","tint.w", go.PLAYBACK_ONCE_FORWARD, 0, go.EASING_LINEAR, 0.5, 5)
	go.animate("/hud/balloon#label","color.w", go.PLAYBACK_ONCE_FORWARD, 0, go.EASING_LINEAR, 0.5, 5, disable_shield_hint)

end

function disable_shield_hint(self, url, property)

	hint_playing = false
	msg.post("/hud/balloon", "disable")

end

function select_shield_help_message()

	local m = ""
	
	if level == 0 then
		m = "I'm the King of Spades' Champion! I master the power of destruction!"
	elseif level == 1 then
		m = "I'm the Queen of Spades' Champion! I'll force her will uppon you!"
	elseif level == 2 then
		m = "I'm the King of Diamonds' Champion! I think this is gonna be a COLD war!"
	elseif level == 3 then
		m = "I'm the Queen of Diamonds' Champion! Do you think you have a choice? I don't think so!"
	elseif level == 4 then
		m = "I'm the King of Clubs' Champion! I can make those pawns turncoat!"
	elseif level == 5 then
		m = "I'm the Queen of Clubs' Champion! I think: twice is better!"
	elseif level == 6 then
		m = "I'm the King of Hearts' Champion! I'll add some twists to this battle!"
	elseif level == 7 then
		m = "I'm the Queen of Hearts' Champion! I'll take what she wants from you!"
	end

	show_shield_hint(m)

	msg.post("/help", "hide")
	
end